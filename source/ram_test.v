/*
 NOW THIS IS PRIMARY SOURCE

   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module ram_test (
    input clk,
    input rst,
    output reg [56:0] memOut,
    input [33:0] memIn,
    output reg [7:0] leds
  );
  
   wire [1:32]       memInData = memIn[0+31-:32];
   wire [1:32]       memInDataHacked = 
                     memInData + doHack;

   wire              doHack = M_addr_q == 999;
   
                         
  
  localparam WRITE_state = 1'd0;
  localparam READ_state = 1'd1;
  
  reg M_state_d, M_state_q = WRITE_state;
  reg [22:0] M_addr_d, M_addr_q = 1'h0;
  reg [6:0] M_error_d, M_error_q = 1'h0;
  reg [31:0] M_seed_d, M_seed_q = 1'h0;
  wire [32-1:0] M_pn_gen_num;
  reg [1-1:0] M_pn_gen_rst;
  reg [1-1:0] M_pn_gen_next;
  reg [32-1:0] M_pn_gen_seed;
  pn_gen pn_gen (
    .clk(clk),
    .rst(M_pn_gen_rst),
    .next(M_pn_gen_next),
    .seed(M_pn_gen_seed),
    .num(M_pn_gen_num)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_seed_d = M_seed_q;
    M_addr_d = M_addr_q;
    M_error_d = M_error_q;
    
    leds = {M_state_q == READ_state, M_error_q};
    M_pn_gen_seed = M_seed_q;
    M_pn_gen_next = 1'h0;
    M_pn_gen_rst = rst;
    memOut[33+22-:23] = M_addr_q;
    memOut[56+0-:1] = 1'bx;
    memOut[0+31-:32] = M_pn_gen_num;
    memOut[32+0-:1] = 1'h0;
    
    case (M_state_q)
      WRITE_state: begin
        if (!memIn[33+0-:1]) begin
          M_pn_gen_next = 1'h1;
          M_addr_d = M_addr_q + 1'h1;
          memOut[56+0-:1] = 1'h1;
          memOut[32+0-:1] = 1'h1;
          if (M_addr_q == 23'h7fffff) begin
            M_addr_d = 1'h0;
            M_state_d = READ_state;
            M_pn_gen_rst = 1'h1;
          end
        end
      end
      READ_state: begin
        if (!memIn[33+0-:1]) begin
          M_addr_d = M_addr_q + 1'h1;
          memOut[32+0-:1] = 1'h1;
          memOut[56+0-:1] = 1'h0;
          if (M_addr_q == 24'h7ffffe) begin
            M_seed_d = M_seed_q + 1'h1;
          end
          if (M_addr_q == 23'h7fffff) begin
            M_addr_d = 1'h0;
            M_state_d = WRITE_state;
            M_pn_gen_rst = 1'h1;
          end
        end
        if (memIn[32+0-:1]) begin
          M_pn_gen_next = 1'h1;
          if (memInDataHacked != M_pn_gen_num && !(&M_error_q)) begin
            M_error_d = M_error_q + 1'h1;
          end
        end
      end
      default: begin
        M_state_d = WRITE_state;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_addr_q <= 1'h0;
      M_error_q <= 1'h0;
      M_seed_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_addr_q <= M_addr_d;
      M_error_q <= M_error_d;
      M_seed_q <= M_seed_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
